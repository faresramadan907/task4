namespace bank_system_management
{
    // Account Class
    public class Account
    {
        public string Name { get; set; }
        public double Balance { get; set; }

        public Account(string Name = "Unnamed Account", double Balance = 0.0)
        {
            this.Name = Name;
            this.Balance = Balance;
        }

        public bool Deposit(double amount)
        {
            if (amount > 0)
            {
                Balance += amount;
                return true;
            }
            return false;
        }

        public bool Withdraw(double amount)
        {
            if (Balance - amount >= 0)
            {
                Balance -= amount;
                return true;
            }
            return false;
        }

        // Overloading the + operator to sum the balances of two Account objects
        public static double operator +(Account acc1, Account acc2)
        {
            return acc1.Balance + acc2.Balance;
        }

        public virtual void Display()
        {
            Console.WriteLine($"Account: {Name}, Balance: {Balance}");
        }

        public override string ToString()
        {
            return $"{Name} - {Balance}";
        }
    }

    // SavingsAccount Class
    public class SavingsAccount : Account
    {
        public double InterestRate { get; set; }

        public SavingsAccount(string Name = "Unnamed Account", double Balance = 0.0, double InterestRate = 0.0)
            : base(Name, Balance)
        {
            this.InterestRate = InterestRate;
        }

        public bool Deposit(double amount)
        {
            bool result = base.Deposit(amount);
            if (result)
            {
                Balance += Balance * InterestRate / 100; // Add interest to the deposit
            }
            return result;
        }

        public override void Display()
        {
            Console.WriteLine($"Savings Account: {Name}, Balance: {Balance}, Interest Rate: {InterestRate}%");
        }
    }

    // CheckingAccount Class
    public class CheckingAccount : Account
    {
        public double WithdrawalFee { get; set; } = 1.50;

        public CheckingAccount(string Name = "Unnamed Account", double Balance = 0.0)
            : base(Name, Balance)
        { }

        public bool Withdraw(double amount)
        {
            double totalAmount = amount + WithdrawalFee;
            if (Balance >= totalAmount)
            {
                Balance -= totalAmount;
                return true;
            }
            return false;
        }

        public override void Display()
        {
            Console.WriteLine($"Checking Account: {Name}, Balance: {Balance}, Withdrawal Fee: {WithdrawalFee}");
        }
    }

    // TrustAccount Class
    public class TrustAccount : Account
    {
        public double InterestRate { get; set; }
        private int WithdrawalCount { get; set; } = 0;
        private const int MaxWithdrawals = 3;

        public TrustAccount(string Name = "Unnamed Account", double Balance = 0.0, double InterestRate = 0.0)
            : base(Name, Balance)
        {
            this.InterestRate = InterestRate;
        }

        public bool Deposit(double amount)
        {
            if (amount >= 5000)
            {
                Balance += amount + 50; // $50 bonus for deposits >= 5000
            }
            else
            {
                return base.Deposit(amount);
            }
            return true;
        }

        public bool Withdraw(double amount)
        {
            if (WithdrawalCount < MaxWithdrawals && amount <= Balance * 0.2)
            {
                bool result = base.Withdraw(amount);
                if (result)
                {
                    WithdrawalCount++;
                }
                return result;
            }
            Console.WriteLine("Withdrawal limit reached or amount exceeds 20% of balance");
            return false;
        }

        public override void Display()
        {
            Console.WriteLine($"Trust Account: {Name}, Balance: {Balance}, Interest Rate: {InterestRate}%, Withdrawals: {WithdrawalCount}/{MaxWithdrawals}");
        }
    }

    // AccountUtil Class
    public static class AccountUtil
    {
        public static void Display(List<Account> accounts)
        {
            Console.WriteLine("\n=== Accounts ==========================================");
            foreach (var acc in accounts)
            {
                Console.WriteLine(acc);
            }
        }

        public static void Deposit(List<Account> accounts, double amount)
        {
            Console.WriteLine("\n=== Depositing to Accounts =================================");
            foreach (var acc in accounts)
            {
                if (acc.Deposit(amount))
                    Console.WriteLine($"Deposited {amount} to {acc}");
                else
                    Console.WriteLine($"Failed Deposit of {amount} to {acc}");
            }
        }

        public static void Withdraw(List<Account> accounts, double amount)
        {
            Console.WriteLine("\n=== Withdrawing from Accounts ==============================");
            foreach (var acc in accounts)
            {
                if (acc.Withdraw(amount))
                    Console.WriteLine($"Withdrew {amount} from {acc}");
                else
                    Console.WriteLine($"Failed Withdrawal of {amount} from {acc}");
            }
        }

        internal static void Withdraw(List<CheckingAccount> checAccounts, int v)
        {
            throw new NotImplementedException();
        }

        internal static void Withdraw(List<TrustAccount> trustAccounts, int v)
        {
            throw new NotImplementedException();
        }

        internal static void Deposit(List<TrustAccount> trustAccounts, int v)
        {
            throw new NotImplementedException();
        }

        internal static void Display(List<TrustAccount> trustAccounts)
        {
            throw new NotImplementedException();
        }

        internal static void Display(List<CheckingAccount> checAccounts)
        {
            throw new NotImplementedException();
        }

        internal static void Deposit(List<CheckingAccount> checAccounts, int v)
        {
            throw new NotImplementedException();
        }

        internal static void Display(List<SavingsAccount> savAccounts)
        {
            throw new NotImplementedException();
        }

        internal static void Deposit(List<SavingsAccount> savAccounts, int v)
        {
            throw new NotImplementedException();
        }

        internal static void Withdraw(List<SavingsAccount> savAccounts, int v)
        {
            throw new NotImplementedException();
        }
    }

    // Program Class
    public class Program
    {
        static void Main()
        {
            // Accounts
            var accounts = new List<Account>
        {
            new Account("Larry"),
            new Account("Moe", 2000),
            new Account("Curly", 5000)
        };

            AccountUtil.Display(accounts);
            AccountUtil.Deposit(accounts, 1000);
            AccountUtil.Withdraw(accounts, 2000);

            // Savings
            var savAccounts = new List<SavingsAccount>
        {
            new SavingsAccount("Superman"),
            new SavingsAccount("Batman", 2000),
            new SavingsAccount("Wonderwoman", 5000, 5.0)
        };

            AccountUtil.Display(savAccounts);
            AccountUtil.Deposit(savAccounts, 1000);
            AccountUtil.Withdraw(savAccounts, 2000);

            // Checking
            var checAccounts = new List<CheckingAccount>
        {
            new CheckingAccount("Larry2"),
            new CheckingAccount("Moe2", 2000),
            new CheckingAccount("Curly2", 5000)
        };

            AccountUtil.Display(checAccounts);
            AccountUtil.Deposit(checAccounts, 1000);
            AccountUtil.Withdraw(checAccounts, 2000);
            AccountUtil.Withdraw(checAccounts, 2000);

            // Trust
            var trustAccounts = new List<TrustAccount>
        {
            new TrustAccount("Superman2"),
            new TrustAccount("Batman2", 2000),
            new TrustAccount("Wonderwoman2", 5000, 5.0)
        };

            AccountUtil.Display(trustAccounts);
            AccountUtil.Deposit(trustAccounts, 1000);
            AccountUtil.Deposit(trustAccounts, 6000);
            AccountUtil.Withdraw(trustAccounts, 2000);
            AccountUtil.Withdraw(trustAccounts, 3000);
            AccountUtil.Withdraw(trustAccounts, 500);

            // Example of using the overloaded + operator
            var account1 = new Account("Account1", 5000);
            var account2 = new Account("Account2", 3000);
            double combinedBalance = account1 + account2;
            Console.WriteLine($"Combined Balance of {account1.Name} and {account2.Name}: {combinedBalance}");

            Console.WriteLine();
        }
    }
}
